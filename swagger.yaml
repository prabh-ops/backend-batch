paths:
  /user:
    get:
      summary: Get user information
      tags:
        - get all users
      description: Retrieve user information
      operationId: getUserInfo
      parameters:
        - name: userId
          in: query
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              $ref: "#/components/schemas/User"
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
        "500":
          description: Internal server error
    post:
      summary: Create a new user
      tags:
        - create user
      description: Create a new user in the system
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              $ref: "#/components/schemas/User"
        "400":
          description: Invalid input data
        "409":
          description: User already exists
        "500":
          description: Internal server error

  /user/{userId}:
    get:
      summary: Get user information by ID
      tags:
        - get users by id
      description: Retrieve user information by ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              $ref: "#/components/schemas/User"
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found

components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
          description: "User's name"
        email:
          type: string
          format: email
          uniqueItems: true
          description: "User's email address"
        profilePic:
          type: string
          nullable: true
          description: "Profile picture URL"
        bio:
          type: string
          nullable: true
          description: "User bio"
        follower:
          type: array
          items:
            type: string
            format: uuid
          description: "List of user IDs who follow this user"
        follows:
          type: array
          items:
            type: string
            format: uuid
          description: "List of user IDs this user follows"
        password:
          type: string
          format: password
          description: "User's hashed password"
        post:
          type: array
          items:
            type: string
            format: uuid
          description: "List of post IDs created by the user"
    Post:
      
  