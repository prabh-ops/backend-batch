<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sign In</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script> 
    tailwind.config = {
      theme: {
        extend: {
          animation: {
            'fade-in': 'fadeIn 0.5s ease-out',
            'slide-up': 'slideUp 0.5s ease-out',
            'scale': 'scale 0.3s ease-out',
          },
          keyframes: {
            fadeIn: {
              '0%': { opacity: '0' },
              '100%': { opacity: '1' },
            },
            slideUp: {
              '0%': { transform: 'translateY(20px)', opacity: '0' },
              '100%': { transform: 'translateY(0)', opacity: '1' },
            },
            scale: {
              '0%': { transform: 'scale(0.95)' },
              '100%': { transform: 'scale(1)' },
            }
          }
        }
      }
    }
  </script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
    
    body {
      font-family: 'Inter', sans-serif;
    }
    
    .form-input {
      transition: all 0.3s ease;
    }
    
    .form-input:focus {
      transform: translateY(-1px);
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .bg-gradient-mesh {
      background: linear-gradient(45deg, #FF6B6B 0%, #4ECDC4 100%);
      background-size: 400% 400%;
      animation: gradient 15s ease infinite;
    }

    @keyframes gradient {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }
  </style>
</head>
<body class="min-h-screen bg-gradient-mesh flex items-center justify-center p-4">
  <div class="w-full max-w-md animate-fade-in">
    <div class="bg-white/90 backdrop-blur-xl rounded-2xl shadow-2xl p-8 animate-slide-up">
      <div class="text-center mb-8">
        <div class="w-16 h-16 bg-gradient-to-br from-pink-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4 animate-scale">
          <div class="w-8 h-8 text-white">✨</div>
        </div>
        <h2 class="text-3xl font-bold text-gray-800 mb-2">Welcome Back</h2>
        <p class="text-gray-600">Sign in to continue your journey</p>
      </div>

      <form id="signinForm" class="space-y-4">
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
          <input
            type="email"
            id="email"
            name="email"
            required
            class="form-input w-full px-4 py-3 rounded-xl border border-gray-200 focus:border-purple-500 focus:ring focus:ring-purple-200 focus:ring-opacity-50"
            placeholder="you@example.com"
          />
          <p id="emailError" class="mt-1 text-sm text-red-600 hidden"></p>
        </div>

        <div>
          <div class="flex justify-between items-center mb-1">
            <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
            <a href="/forgot-password" class="text-sm text-purple-600 hover:text-purple-500">Forgot password?</a>
          </div>
          <input
            type="password"
            id="password"
            name="password"
            required
            class="form-input w-full px-4 py-3 rounded-xl border border-gray-200 focus:border-purple-500 focus:ring focus:ring-purple-200 focus:ring-opacity-50"
            placeholder="••••••••"
          />
          <p id="passwordError" class="mt-1 text-sm text-red-600 hidden"></p>
        </div>

        <div class="flex items-center">
          <input
            type="checkbox"
            id="remember"
            name="remember"
            class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
          />
          <label for="remember" class="ml-2 block text-sm text-gray-700">
            Remember me
          </label>
        </div>

        <button
          type="submit"
          class="w-full bg-gradient-to-r from-purple-600 to-pink-500 text-white py-3 rounded-xl hover:opacity-90 transition duration-300 transform hover:-translate-y-0.5 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 font-medium mt-6"
        >
          <span id="buttonText" class="flex items-center justify-center">
            Sign In
          </span>
          <span id="loadingSpinner" class="hidden items-center justify-center">
            <span class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></span>
          </span>
        </button>
      </form>

      <div class="mt-6 text-center">
        <p class="text-gray-600">
          Don't have an account?
          <a href="/sign-up" class="text-purple-600 hover:text-purple-500 font-medium">Sign up</a>
        </p>
      </div>

      <!-- Error Message -->
      <div id="errorMessage" class="hidden mt-6 p-4 rounded-lg bg-red-50 text-red-700 text-center animate-fade-in">
        <p class="font-medium">Invalid credentials</p>
        <p class="text-sm mt-1">Please check your email and password and try again.</p>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('signinForm');
      const emailInput = document.getElementById('email');
      const passwordInput = document.getElementById('password');
      const emailError = document.getElementById('emailError');
      const passwordError = document.getElementById('passwordError');
      const buttonText = document.getElementById('buttonText');
      const loadingSpinner = document.getElementById('loadingSpinner');
      const errorMessage = document.getElementById('errorMessage');

      const validateEmail = (email) => {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
      };

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Reset errors
        emailError.classList.add('hidden');
        passwordError.classList.add('hidden');
        errorMessage.classList.add('hidden');
        
        const email = emailInput.value.trim();
        const password = passwordInput.value;
        
        if (!validateEmail(email)) {
          emailError.textContent = 'Please enter a valid email address';
          emailError.classList.remove('hidden');
          return;
        }

        if (password.length < 8) {
          passwordError.textContent = 'Password must be at least 8 characters';
          passwordError.classList.remove('hidden');
          return;
        }

        // Show loading state
        buttonText.classList.add('hidden');
        loadingSpinner.classList.remove('hidden');
        form.querySelector('button').disabled = true;

        try {
          // Simulate API call
          await new Promise(resolve => setTimeout(resolve, 1500));
          
          // Simulate failed login for demo
          if (Math.random() > 0.5) {
            throw new Error('Invalid credentials');
          }

          // Redirect on success
          window.location.href = '/dashboard';
        } catch (error) {
          errorMessage.classList.remove('hidden');
        } finally {
          buttonText.classList.remove('hidden');
          loadingSpinner.classList.add('hidden');
          form.querySelector('button').disabled = false;
        }
      });
    });
  </script>
</body>
</html>